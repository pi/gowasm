// +build ignore
package main

import (
	"bufio"
	_ "fmt"
	"os"
	"strings"

	"github.com/pi/goal/set"
)

const head = `
package wasm

type Opcode int

const (
	Op_none = Opcode(-1)
`

type oprec struct {
	mnem      string
	hex       string
	constName string
}

func main() {
	f, err := os.Open("optable.txt")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	blockOps := set.Strings([]string{"block", "if", "loop"})

	scanner := bufio.NewScanner(f)

	var oparray []oprec

	qr := strings.NewReplacer("`", "", " ", "")
	pr := strings.NewReplacer("/", ".", "_", ".")
	for scanner.Scan() {
		l := strings.TrimSpace(scanner.Text())
		if l == "" {
			continue
		}
		fields := strings.Split(l, "|")[1:3]
		mnem := qr.Replace(fields[0])
		mnemParts := strings.Split(pr.Replace(mnem), ".")
		for i, p := range mnemParts {
			mnemParts[i] = strings.ToTitle(p[:1]) + p[1:]
		}
		oparray = append(oparray, oprec{
			mnem:      mnem,
			hex:       qr.Replace(fields[1]),
			constName: "Op" + strings.Join(mnemParts, ""),
		})
	}
	of, err := os.Create("opcodes.go")
	if err != nil {
		panic(err)
	}
	defer of.Close()
	w := bufio.NewWriter(of)
	w.WriteString(`// *** DO NOT EDIT! automatically generated by genopcodes from optable.txt
package wasm

// Opcode type
type Opcode int

// Opcode values
const(
	OpNone = Opcode(-1)
`)
	for _, r := range oparray {
		w.WriteString("\t" + r.constName + " = Opcode(" + r.hex + ")\n")
	}
	w.WriteString(")\n")

	w.WriteString("\nvar opcodeMnemonics = map[Opcode]string {\n")
	for _, r := range oparray {
		w.WriteString("\t" + r.constName + `: "` + r.mnem + `",` + "\n")
	}
	w.WriteString("}\n")

	w.WriteString("\nvar opcodeFlags = map[Opcode]int{\n")
	for _, r := range oparray {
		fv := ""

		if blockOps.Includes(r.mnem) {
			fv = "OpfBlock"
		} else if strings.HasPrefix(r.mnem, "i32.") {
			fv = "OpfI32"
		} else if strings.HasPrefix(r.mnem, "i64.") {
			fv = "OpfI64"
		} else if strings.HasPrefix(r.mnem, "f32.") {
			fv = "OpfF32"
		} else if strings.HasPrefix(r.mnem, "f64.") {
			fv = "OpfF64"
		}
		if fv == "" {
			fv = "0"
		}

		w.WriteString("\t" + r.constName + ": " + fv + ",\n")
	}
	w.WriteString("}\n")

	w.Flush()
}
